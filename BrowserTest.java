/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.time.Year;
import java.util.ArrayList;
import java.util.List;
import java.time.format.DateTimeFormatter;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.OptionalInt;
import java.util.stream.*;

import com.beust.jcommander.Parameter;
import com.codeborne.selenide.Configuration;
import org.junit.Before;
import org.testng.annotations.*;
import registration.RegistrationPage1;
import registration.RegistrationPage2;


public class BrowserTest {

    /*RegistrationPage1 page1;
    RegistrationPage2 page2;*/

    /*@BeforeGroups("group1")
    public void BeforeGroup1(){
        System.out.println("Before group1");
    }
    @AfterGroups("group1")
    public void AfterGroup1(){
        System.out.println("After group1");
    }
    @BeforeGroups("group2")
    public void BeforeGroup2(){
        System.out.println("Before group2");
    }
    @AfterGroups("group2")
    public void AfterGroup2(){
        System.out.println("After group2");
    }
    @BeforeGroups("group2")
    public void BeforeGroup12(){
        System.out.println("Before group1 and group2");
    }
    @AfterGroups("group2")
    public void AfterGroup12(){
        System.out.println("After group1 and group2");
    }
    @BeforeMethod(enabled = false)
    public void BeforeMethod(){
        System.out.println("Before Method");
    }
    @AfterMethod(enabled = false)
    public void AfterMethod1(){
        System.out.println("After Method");
    }
    @BeforeSuite
    public void BeforeSuite1(){
        System.out.println("Before Suite");
    }
    @AfterSuite
    public void AfterSuite1(){
        System.out.println("After Suite");
    }
    @BeforeClass
    public void BeforeClass1(){
        System.out.println("Before Class\n");
    }
    @AfterClass
    public void AfterClass1(){
        System.out.println("\nAfter Class");
    }
    @BeforeTest
    public void BeforeTest1(){
        System.out.println("Before Test");
    }
    @AfterTest
    public void AfterTest1(){
        System.out.println("After Test");
    }
    @Test(groups = {"group1"})
    public void Group1Test1(){
        System.out.println("Test from group1");
    }
    @Test(dependsOnMethods = "Group1Test1", groups = {"group2"})
    public void Group2Test1(){
        System.out.println("Test from group2");
    }
    @DataProvider(name = "getSomeString")
    public Object[] getSomeString(){

        return new Object[]{"tell","tell2","tell3"};
    }
    @Test(dataProvider = "getSomeString")
    public void Group12Test1(String Text1){
        System.out.println("Test from group1 and group2");
        System.out.println(Text1);
    }*/

    /*@BeforeClass(enabled = false)
    public void test(){
        Configuration.browser="chrome";
        Configuration.headless=false;
        page1 = new RegistrationPage1();
    }
    @Test(enabled = false)
    public void Registration1(){
        page1.registration("Oles", "Ivanov", 23, 3, 2000, "man");
        page2.registration("Ukraine", "88005553535");
    }
    @Test(enabled = false)
    public void Registration2(){
        page2.registration("Ukraine", "88005553535");
    }*/

    @Test
    public void Execution() {
        List<String> result = new ArrayList();
        result = MakeDate("2018-08-01", 3);
        System.out.println(result);
        result = MakeDate("2018-08-28", 3);
        System.out.println(result);
        result = MakeDate("2018-01-02", 34);
        System.out.println(result);
        result = MakeDate("2018-12-27", 4);
        System.out.println(result);
    }

    public List<String> MakeDate(String Date, int count) {
        int day, month, year;
        List<String> test = new ArrayList();
        year = Integer.parseInt(Date.substring(0, 4));
        month = Integer.parseInt(Date.substring(5, 7));
        day = Integer.parseInt(Date.substring(8, 10));
        if ((day <= 0) || (day > 28) || (month <= 0) || (month > 12)) return test;
        for (int i = 1; i <= count; i++) {
            if (day == 1) {
                if (month == 1) {
                    year--;
                    month = 12;
                } else month--;
                day = 28;
            } else day--;
        }
        test.add(BuildData(year, month, day));
        for (int i = 1; i <= (2*count); i++) {
            if (day == 28) {
                if (month == 12) {
                    year++;
                    month = 1;
                } else month++;
                day = 1;
            } else day++;
            test.add(BuildData(year, month, day));
        }
        return test;
    }

    public String BuildData(int year, int month, int day) {
        if ((month < 10) && (day < 10)) return (String.valueOf(year) + "-0" + String.valueOf(month) + "-0" + String.valueOf(day));
        if (month < 10) return (String.valueOf(year) + "-0" + String.valueOf(month) + "-" + String.valueOf(day));
        if (day < 10) return (String.valueOf(year) + "-" + String.valueOf(month) + "-0" + String.valueOf(day));
        return (String.valueOf(year) + "-" + String.valueOf(month) + "-" + String.valueOf(day));
    }

    /*@Test
    public static void Execution() {
        List<String> test = new ArrayList();
        test = getDate("2018-03-12", "2018-03-14");
        System.out.println(test);
    }

    public static List<String> getDate(String from, String to) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate localFrom = LocalDate.parse(from, formatter);
        LocalDate localTo = LocalDate.parse(to, formatter);
        long numOfDaysBetween = ChronoUnit.DAYS.between(localFrom, localTo);
        return IntStream.iterate(0, i -> i + 1)
                .limit(numOfDaysBetween)
                .mapToObj(i -> localFrom.plusDays(i).format(formatter))
                .collect(Collectors.toList());
    }*/
}